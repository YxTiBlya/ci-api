// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.11
// source: executor.proto

package executor

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ExecutorAPI_ExecuteTask_FullMethodName = "/executor.ExecutorAPI/ExecuteTask"
)

// ExecutorAPIClient is the client API for ExecutorAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExecutorAPIClient interface {
	ExecuteTask(ctx context.Context, in *ExecuteRequest, opts ...grpc.CallOption) (*ExecuteResponse, error)
}

type executorAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewExecutorAPIClient(cc grpc.ClientConnInterface) ExecutorAPIClient {
	return &executorAPIClient{cc}
}

func (c *executorAPIClient) ExecuteTask(ctx context.Context, in *ExecuteRequest, opts ...grpc.CallOption) (*ExecuteResponse, error) {
	out := new(ExecuteResponse)
	err := c.cc.Invoke(ctx, ExecutorAPI_ExecuteTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExecutorAPIServer is the server API for ExecutorAPI service.
// All implementations must embed UnimplementedExecutorAPIServer
// for forward compatibility
type ExecutorAPIServer interface {
	ExecuteTask(context.Context, *ExecuteRequest) (*ExecuteResponse, error)
	mustEmbedUnimplementedExecutorAPIServer()
}

// UnimplementedExecutorAPIServer must be embedded to have forward compatible implementations.
type UnimplementedExecutorAPIServer struct {
}

func (UnimplementedExecutorAPIServer) ExecuteTask(context.Context, *ExecuteRequest) (*ExecuteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteTask not implemented")
}
func (UnimplementedExecutorAPIServer) mustEmbedUnimplementedExecutorAPIServer() {}

// UnsafeExecutorAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExecutorAPIServer will
// result in compilation errors.
type UnsafeExecutorAPIServer interface {
	mustEmbedUnimplementedExecutorAPIServer()
}

func RegisterExecutorAPIServer(s grpc.ServiceRegistrar, srv ExecutorAPIServer) {
	s.RegisterService(&ExecutorAPI_ServiceDesc, srv)
}

func _ExecutorAPI_ExecuteTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExecutorAPIServer).ExecuteTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExecutorAPI_ExecuteTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExecutorAPIServer).ExecuteTask(ctx, req.(*ExecuteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ExecutorAPI_ServiceDesc is the grpc.ServiceDesc for ExecutorAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ExecutorAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "executor.ExecutorAPI",
	HandlerType: (*ExecutorAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExecuteTask",
			Handler:    _ExecutorAPI_ExecuteTask_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "executor.proto",
}
